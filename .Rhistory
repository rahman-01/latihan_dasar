iris
# Check the result
iris
install.packages("ggvis")
devtools::install_github("hadley/lazyeval", build_vignettes = FALSE)
# Iris scatter plot
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
cor(iris[iris$Species==x[3],1:4])
library ggvis
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
cor(iris[iris$Species==x[3],1:4])
# Return structure of `iris`
str(iris)
v <- 1:5
v <- c(1,2,3,4,5)
v <- seq(from=1,to=5,by=1)
v0 <- c(0,0,0,0,0,0)
v0 <- seq(from=0,to=0,length.out=6)
v1 <- c(1,2,3,4,5)
v2 <- c(6,7,8,9,10)
v3 <- c(11,12,13,14,15)
v4 <- c(16,17,18,19,20)
cbind(v1,v2,v3,v4)
rbind(v1,v2,v3,v4)
v <- seq(from=1,to=20,by=1)
matrix(v, nrow=4, ncol=5)
matrix(v, nrow=4, ncol=5, byrow=TRUE)
v <- seq(from=1,to=20,by=1)
matrix(v, nrow=4, ncol=5)
matrix(v, nrow=4, ncol=5, byrow=TRUE)
matrix20 <- matrix(v, nrow=4, ncol=5, byrow=TRUE)
colnames(matrix20) <- c("Col1","Col2","Col3","Col4","Col5")
rownames(matrix20) <- c("Row1","Row2","Row3","Row4")
v[3]
matrix20[,"Col2"]
matrix20["Row4",]
matrix20["Row3","Col1"]
matrix20[3,1]
length(v1)
setwd("C:/Users/MIN_1/Downloads/webinars-master/webinars-master/11-Getting-Data-into-R")
# Polite to disconnect from db when done
dbDisconnect(db)
url <- "http://www.tripadvisor.com/Hotel_Review-g37209-d1762915-Reviews-JW_Marriott_Indianapolis-Indianapolis_Indiana.html"
httr::BROWSE(url)
# Load the data
tb <- read_csv("tb.csv")
# To convert this messy data into tidy data
# we need two verbs. First we need to gather
# together all the columns that aren't variables
tb2 <- tb %>%
gather(demo, n, m04:fu, na.rm = TRUE)
library(readr)
tb <- read_csv("tb.csv")
View(tb)
View(tb)
reviews <- url %>%
read_html() %>%
html_nodes("#REVIEWS .innerBubble")
# To convert this messy data into tidy data
# we need two verbs. First we need to gather
# together all the columns that aren't variables
tb2 <- tb %>%
gather(demo, n, m04:fu, na.rm = TRUE)
View(tb)
print(msg)
print(msg) #explicit printing
msg <- "hello R!!!"
source('D:/Belajar Data Scientis/R praktek/lat_dasar/Take Input and Print in R.R')
names <- readline(prompt = "Enter your name")
names <- readline(prompt = "Enter your name :")
print(names)
msg <- "hello R!!!"
msg    #auto-printing occurs
print(msg) #explicit printing
{name <-readline(prompt = "Enter your name :");
Rahman
12
klzckcj
klvklcvs
l;xcvld
;lcc
age <- readline(prompt = "Enter your age :")}
age <- readline(prompt = "Enter your age :")}
{name <- readline("Enter your name: ");
age <- readline("Enter your age: ")}
{name <- readline("Enter your name: ");
age <- readline("Enter your age: ")}
print(name)
print(age)
readlines("Enter your name: ","Enter your age: ")
name <- readlines("Enter your name: ","Enter your age: ")
?readlines
readlines("Enter your name: ","Enter your age: ")
name <- readlines("Enter your name: ","Enter your age: ")
fahrenheit_to_celsius <- function(temp_F) {
temp_C <- (temp_F - 32) * 5 / 9
return(temp_C)
}
# freezing point of water
fahrenheit_to_celsius(32)
fahrenheit_to_celsius <- function(temp_F) {
temp_C <- (temp_F - 32) * 5 / 9
return(temp_C)
}
fahrenheit_to_celsius <- function(temp_F) {
temp_C <- (temp_F - 32) * 5 / 9
return(temp_C)
}
# freezing point of water
fahrenheit_to_celsius(32)
# boiling point of water
fahrenheit_to_celsius(212)
best_practice <- c("Write", "programs", "for", "people", "not", "computers")
asterisk <- "***"  # R interprets a variable with a single value as a vector
# with one element.
highlight(best_practice, asterisk)
source('D:/Belajar Data Scientis/R praktek/lat_dasar/Take Input and Print in R.R')
if (print & !npar) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & npar) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
# invoking the function
set.seed(1234)
mysummary <- function(x,npar=TRUE,print=TRUE) {
if (!npar) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & !npar) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & npar) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center,spread=spread)
return(result)
}
mysummary <- function(x,npar=TRUE,print=TRUE) {
if (!npar) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & !npar) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & npar) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center,spread=spread)
return(result)
}
set.seed(1234)
x <- rpois(500, 4)
y <- mysummary(x)
Median= 4
MAD= 1.4826
y <- mysummary(x, npar=FALSE, print=FALSE)
mydata$sum <- mydata$x1 + mydata$x2
mydata$mean <- (mydata$x1 + mydata$x2)/2
attach(mydata)
mydata$sum <- x1 + x2
mydata$mean <- (x1 + x2)/2
detach(mydata)
mydata <- transform( mydata,
sum = x1 + x2,
mean = (x1 + x2)/2
)
mydata$sum <- mydata$x1 + mydata$x2
mydata$mean <- (mydata$x1 + mydata$x2)/2
mydata$agecat <- ifelse(mydata$age >70,
c("older"),c("younger"))
mydata$mean <- (mydata$x1 + mydata$x2)/2
detach(mydata)
mydata$sum <- mydata$x1 + mydata$x2
mydata$mean <- (mydata$x1 + mydata$x2)/2
mydata$sum <- mydata$x1 + mydata$x2
mydata$mean <- (mydata$x1 + mydata$x2)/2
mydata <-transform(mydata,
sum = x1 + x2,
mean = (x1 + x2)/2
)
#3 contoh variable komputasi
mydata$sum <- mydata$x1 + mydata$x2
mydata$mean <- (mydata$x1 + mydata$x2)/2
attach(mydata)
mydata$sum <- x1 + x2
mydata$mean <- (x1 + x2)/2
detach(mydata)
mydata <-transform(mydata,
sum = x1 + x2,
mean = (x1 + x2)/2
)
mydata$sum <- mydata$x1 + mydata$x2
?attach
setwd("D:/Belajar Data Scientis/R praktek/lat_dasar")
# Create a sequence of numbers from 32 to 44.
print(seq(32,44))
print(seq(32,44))
# Find mean of numbers from 25 to 82
print(mean((25:82)))
# Find sum of numbers frm 41 to 68.
print(sum(41:68))
for(i in 1:a)
# Create a function to print squares of numbers in sequence.
new.function <- function(a) {
for(i in 1:a)
b <-i^2
print(b)
}
new.function <- function(a) {
for(i in 1:a)
b <-i^2
print(b)
}
new.function <- function(a) {
for(i in 1:a) {
b <- 1^2
print(b)
}
}
# Call the function new.function supplying 6 as an argument.
new.function(6)
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(b)
}
}
new.function(6)
# Call the function without supplying an argument.
new.function()
new.function <- function(){
for (i in 1:5){
print(i^2)
}
}
new.function()
new.function <- function (a,b,c){
result <- a*b+c
print(result)
}
# Call the function by position of arguments.
new.function(5,3,11)
# Call the function by names of the arguments.
new.function(a=11,b=5,c=3)
result <- a*b
new.function <- function(a=3,b=6) {
result <- a*b
print(result)
}
new.function <- function(a = 3, b = 6) {
result <- a * b
print(result)
}
# Call the function without giving any argument.
new.function()
# Call the function with giving new values of the argument.
new.function(9,5)
new.function <- function(a, b){
print(a^2)
print(a)
print(b)
}
# Evaluate the function without supplying one of the arguments.
new.function(6)
print (a)
a <- 'start and end with single quote'
print (a)
b <- 'start and end with double quotes'
print(b)
c <- "single quote ' in between double quotes"
print(c)
print(d)
d <- 'Double quotes" in betwen single quote'
print(d)
d <- 'Double quotes " in betwen single quote'
print(d)
d <- 'Double quotes " in between single quote'
print(d)
e <- 'Mixed quotes'
e <- 'Mixed quotes"
e <- 'Mixed quotes"
print(e)
e <- 'Mixed quotes"
print(e)
f <- 'Single quote ' inside singel quote'
print(f)
f <- 'Single quote ' inside singel quote'
f <- 'Single quote ' inside single quote'
g <- "Double quotes " inside double quotes"
a <- 'start and end with single quote'
f <- 'Single quote ' inside single quote'
print(f)
g <- "Double quotes " inside double quotes"
print(g)
e <- 'Mixed quotes"
print(e)
c <- "are ypu ?"
a <- "hello"
b <- 'how'
c <- "are ypu ?"
c <- "are you ?"
a <- "hello"
b <- 'how'
c <- "are you ?"
c <- "are you ?"
print(paste(a,b,c))
print(paste(a,b,c, sep = "-"))
print(paste(a,b,c, sep = "", collapse))
print(paste(a,b,c, sep = "", collapse = ""))
#Formatting numbers & strings - format() function
# Total number of digits displayed. Last digit rounded off.
result <-format(23.123456789, digit = 9)
print(result)
# Display numbers in scientific notation.
result <- format(c(6,13.14521), scientific = True)
print(result)
result <- format(c(6,13.14521), scientific = True)
result <- format(c(6, 13.14521), scientific = TRUE)
result <- format(c(6, 13.14521), scientific = TRUE)
result <- format(c(6, 13.14521), scientific = TRUE)
print(result)
# The minimum number of digits to the right of the decimal point.
result <- format(23.47,nsmall = 5)
print(result)
# Format treats everything as a string.
result <- format(6)
print(6)
# Numbers are padded with blank in the beginning for width.
result <- format(13.7,width =6)
print(result)
# Left justify strings.
result <- format("Hello", width = 8, justify ="1")
print(result)
result <- format("Hello", width = 8, justify = "l")
print(result)
result <- format("Hello", width = 8, justify = "c")
print(result)
#Counting number of characters in a string - nchar() function
result <-nchart("Count the number of characters")
result <- nchart("Count the number of characters")
result <- nchar("Count the number of characters")
print(result)
# Changing to Upper case.
result <-toupper("Canging To Upper")
print(result)
# Changing to lower case.\
result <- tolower("Changing To Lower")
print(result)
result <- substring("Extract", 5, 7)
print(result)
print("abc");
print(12.5)
print(63L)
print(TRUE)
print(2+3i)
print(charToRaw('hello'))
v <- 5:13
print(v)
# Creating a sequence from 6.6 to 12.6.
v <- 6.6:12.6
print(v)
# If the final element specified does not belong to the sequence then it is discarded.
v <- 3.8:11.4
print(v)
print(seq(5, 9, by = 0.4))
# The logical and numeric values are converted to characters.
s <- c('apple','red',5,TRUE)
print(s)
# Accessing vector elements using position.
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
u <- t[c(2,3,6)]
print(u)
# Accessing vector elements using logical indexing.
v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
print(v)
# Accessing vector elements using negative indexing.
x <- t[c(-2,-5)]
print(x)
# Accessing vector elements using 0/1 indexing.
y <- t[c(0,0,0,0,0,0,1)]
print(y)
#Vector Manipulation
# Create two vectors.
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11,0,8,1,2)
# Vector addition.
add.result <- v1+v2
print(add.result)
# Vector subtraction.
sub.result <- v1-v2
print(sub.result)
# Vector multiplication.
multi.result <- v1*v2
print(multi.result)
# Vector division.
divi.result <- v1/v2
print(divi.result)
#Vector Element Recycling
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11)
# V2 becomes c(4,11,4,11,4,11)
add.result <- v1+v2
print(add.result)
sub.result <- v1-v2
print(sub.result)
#Vector Element Sorting
v <- c(3,8,4,5,0,11, -9, 304)
# Sort the elements of the vector.
sort.result <- sort(v)
print(sort.result)
# Sort the elements in the reverse order.
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
# Sorting character vectors.
v <- c("Red","Blue","yellow","violet")
sort.result <- sort(v)
print(sort.result)
# Sorting character vectors in reverse order.
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
setwd("D:/Belajar Data Scientis/R praktek/lat_dasar")
